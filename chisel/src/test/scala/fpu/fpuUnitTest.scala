// See README.md for license details.

package fpu

import chisel3._
import chisel3.iotesters
import chisel3.iotesters.{ChiselFlatSpec, Driver, PeekPokeTester}

class FPUUnitTester(c: FPU) extends PeekPokeTester(c) {
    // Methods reminder :
    // poke(c.io.x, value)   -> set value
    // expect(c.oi.y, value) -> assert an output
    // peek(c.io.z, value)   -> return True if both equal
    // step(x)               -> execute x clock cycles

    val floatInput1 = Array("h40100000".U, "h0000000043061000".U, "h00000000c0100000".U, "h0000000043061000".U, "h0000000040100000".U, "h00000000c3061000".U, "h00000000c0100000".U, "h00000000c3061000".U, "h000000004048f5c3".U, "h00000000c048f5c3".U, "h0000000000000000".U, "h0000000080000000".U, "h000000007fc00000".U, "h000000007fc00000".U, "h00000000ffc00000".U, "h00000000ffc00000".U, "h000000007f800000".U, "h000000007f800000".U, "h00000000ff800000".U, "h00000000ff800000".U, "h000000007f800000".U, "h000000007f800000".U, "h000000003f57168b".U, "h000000003f487931".U, "h000000003f6961b9".U, "h000000003eaba251".U, "h000000003e8e387d".U, "h000000003ef46d63".U, "h000000003ebac508".U, "h000000003f73c554".U, "h000000003f22be01".U, "h000000003e110043".U, "h000000003c8588c7".U, "h000000003e0c866f".U, "h000000003e20707c".U, "h000000003e04e7c9".U, "h000000003f7fb984".U, "h000000003f034f8a".U, "h000000003f1cd5f7".U, "h000000003f2336a0".U, "h000000003efcb6e9".U, "h000000003e95c4c3".U, "h000000003f06d8c2".U, "h000000003ecceac4".U, "h000000003e910ea1".U, "h000000003f4ec709".U, "h000000003d8edbdb".U, "h000000003f06a7a2".U, "h000000003e44d3b5".U, "h000000003f63e649".U, "h000000003d836c41".U, "h000000003eea57e2".U, "h000000003e73ffa9".U, "h000000003f66f71c".U, "h000000003e88886a".U, "h000000003ec01b21".U, "h000000003f033585".U, "h000000003f08175c".U, "h000000003ee01209".U, "h000000003f6e498d".U, "h000000003e918ee8".U, "h000000003f23d5a7".U, "h000000003f3017af".U, "h000000003ee15561".U, "h000000003f544686".U, "h000000003e6a76a2".U, "h000000003eb36269".U, "h000000003f74db1a".U, "h000000003f284514".U, "h000000003ee10dff".U, "h000000003ecbffe4".U, "h000000003f2f28f2".U, "h000000003ef70904".U, "h000000003f7343bd".U, "h000000003e173430".U, "h000000003f241ddc".U, "h000000003f1e9de0".U, "h000000003f49376f".U, "h000000003ee4e196".U, "h000000003e4008ae".U, "h000000003f0e7319".U, "h000000003e2dad7b".U, "h000000003dd34b6a".U, "h000000003efdaad8".U, "h000000003f7c18af".U, "h000000003f2f37ca".U, "h000000003f3ff0fc".U, "h000000003e969c30".U, "h000000003f15a10a".U, "h000000003e1c0c12".U, "h000000003e007c7e".U, "h000000003e280a56".U, "h000000003d98a314".U, "h000000003d5728ec".U, "h000000003e347091".U, "h000000003f4c3c7e".U, "h000000003f28148e".U, "h000000003f23b38b".U, "h000000003dbf72b1".U, "h000000003f052c7d".U, "h000000003d8f2b16".U, "h000000003eec3f4e".U, "h000000003f12c502".U, "h000000003d54bdcc".U, "h000000003f7fff94".U, "h000000003f63d422".U, "h000000003f7f6fc1".U, "h000000003f5edbb3".U, "h000000003b885e1b".U, "h000000003f180951".U, "h000000003e270bf2".U, "h000000003f69bc1e".U, "h000000003eb7db59".U, "h000000003f145586".U, "h000000003f2ff89f".U, "h000000003f07e308".U, "h000000003e9bcc93".U, "h000000003f13b461".U, "h000000003f3f706e".U, "h000000003d111583".U, "h000000003f554f1f".U, "h000000003f5f8eb6".U
    )
    val floatInput2 = Array("h43061000".U, "h0000000040100000".U, "h0000000043061000".U, "h00000000c0100000".U, "h00000000c3061000".U, "h0000000040100000".U, "h00000000c3061000".U, "h00000000c0100000".U, "h00000000c048f5c3".U, "h000000004048f5c3".U, "h0000000000000000".U, "h0000000080000000".U, "h0000000042340000".U, "h00000000c2340000".U, "h0000000042340000".U, "h00000000c2340000".U, "h000000003dcccccd".U, "h00000000bdcccccd".U, "h000000003dcccccd".U, "h00000000bdcccccd".U, "h000000007f800000".U, "h00000000ff800000".U, "h000000003ec9ec8f".U, "h000000003f4c6691".U, "h000000003e4a4ae8".U, "h000000003f44aab2".U, "h000000003f0dd0fa".U, "h000000003f20fdaf".U, "h000000003f036e3e".U, "h000000003f6a8bc3".U, "h000000003f37a0c6".U, "h000000003f1b6250".U, "h000000003e78b74f".U, "h000000003f4dde87".U, "h000000003ecd4895".U, "h000000003dded726".U, "h000000003e5f7ebd".U, "h000000003f56d00f".U, "h000000003e979175".U, "h000000003f0637af".U, "h000000003f7907c9".U, "h000000003f4577b3".U, "h000000003f451913".U, "h000000003f643b46".U, "h000000003eb4756c".U, "h000000003f6b4552".U, "h000000003f730719".U, "h000000003db03e0c".U, "h000000003f29c93d".U, "h000000003eb2a218".U, "h000000003ca40760".U, "h000000003d813864".U, "h000000003f787b7a".U, "h000000003f59d5e1".U, "h000000003f0a2dbc".U, "h000000003f429fa9".U, "h000000003f2aeff2".U, "h000000003d20e46d".U, "h000000003f6e8cbe".U, "h000000003f389055".U, "h000000003f3d1096".U, "h000000003eb545de".U, "h000000003e29f522".U, "h000000003f614c9c".U, "h000000003ea921f3".U, "h000000003f64b40e".U, "h000000003f2fc999".U, "h000000003f16b11f".U, "h000000003f5bd236".U, "h000000003f6c8949".U, "h000000003f509490".U, "h000000003f693577".U, "h000000003e5d0138".U, "h000000003f6b8d86".U, "h000000003f618d4a".U, "h000000003edd2900".U, "h000000003e8fe705".U, "h000000003e9d6b1e".U, "h000000003e67887f".U, "h000000003e8d6ea2".U, "h000000003ed53fa8".U, "h000000003f68244d".U, "h000000003e0119e5".U, "h000000003f42ae81".U, "h000000003f6f5c6c".U, "h000000003ec43143".U, "h000000003ebcc178".U, "h000000003e6dd5f8".U, "h000000003e7a4755".U, "h000000003f3b6e16".U, "h000000003f4b20e0".U, "h000000003f3ebd00".U, "h000000003f733a05".U, "h000000003f05852d".U, "h000000003e75d2e9".U, "h000000003f3b8f3d".U, "h000000003f77a7dd".U, "h000000003f427dfc".U, "h000000003e0a23dc".U, "h000000003da0382c".U, "h000000003e51911a".U, "h000000003f51d65f".U, "h000000003f416dbf".U, "h000000003e219831".U, "h000000003e513b85".U, "h000000003e007acf".U, "h000000003d5d6b7a".U, "h000000003d94211f".U, "h000000003f6c4e42".U, "h000000003e38b382".U, "h000000003ec88b9f".U, "h000000003f51d78b".U, "h000000003f0d6fa9".U, "h000000003ee7b805".U, "h000000003dcc1017".U, "h000000003f41de02".U, "h000000003f7e02af".U, "h000000003f60ab4c".U, "h000000003f21003e".U, "h000000003f3f7002".U, "h000000003f6ce57a".U, "h000000003f54bee0".U
    )
    val floatOutputAdd = Array("h43085000".U, "h0000000043085000".U, "h000000004303d000".U, "h000000004303d000".U, "h00000000c303d000".U, "h00000000c303d000".U, "h00000000c3085000".U, "h00000000c3085000".U, "h0000000000000000".U, "h0000000000000000".U, "h0000000000000000".U, "h0000000080000000".U, "h000000007fc00000".U, "h000000007fc00000".U, "h00000000ffc00000".U, "h00000000ffc00000".U, "h000000007f800000".U, "h000000007f800000".U, "h00000000ff800000".U, "h00000000ff800000".U, "h000000007f800000".U, "h00000000ffc00000".U, "h000000003f9e0669".U, "h000000003fca6fe1".U, "h000000003f8dfa3a".U, "h000000003f8d3ded".U, "h000000003f54ed38".U, "h000000003f8d9a30".U, "h000000003f60d0c2".U, "h000000003fef288c".U, "h000000003fad2f64".U, "h000000003f3fa261".U, "h000000003e84b434".U, "h000000003f710023".U, "h000000003f0ec06a".U, "h000000003e74535c".U, "h000000003f9bcc9a".U, "h000000003fad0fcc".U, "h000000003f689eb2".U, "h000000003f94b728".U, "h000000003fbbb19f".U, "h000000003f882d0a".U, "h000000003fa5f8ea".U, "h000000003fa55854".U, "h000000003f22c206".U, "h000000003fdd062e".U, "h000000003f82714a".U, "h000000003f1caf64".U, "h000000003f5afe2a".U, "h000000003f9e9baa".U, "h000000003dac6e19".U, "h000000003f0552fe".U, "h000000003f9abdb2".U, "h000000003fe0667e".U, "h000000003f4e71f1".U, "h000000003f91569d".U, "h000000003f9712bc".U, "h000000003f1225a3".U, "h000000003faf4ae1".U, "h000000003fd36cf1".U, "h000000003f82ec05".U, "h000000003f7e7896".U, "h000000003f5a94f8".U, "h000000003fa8fba6".U, "h000000003f946bc0".U, "h000000003f8fa8db".U, "h000000003f84bd67".U, "h000000003fc5c61c".U, "h000000003fc20ba5".U, "h000000003fae8824".U, "h000000003f9b4a41".U, "h000000003fcc2f34".U, "h000000003f32c4d0".U, "h000000003fef68a2".U, "h000000003f83ad2b".U, "h000000003f89592e".U, "h000000003f669162".U, "h000000003f8bf67f".U, "h000000003f2c52eb".U, "h000000003eed72f9".U, "h000000003f7912ed".U, "h000000003f89c7d6".U, "h000000003e6abf9a".U, "h000000003fa0c1f6".U, "h000000003ff5ba8e".U, "h000000003f88a836".U, "h000000003f8f28dc".U, "h000000003f06c396".U, "h000000003f5432df".U, "h000000003f62711a".U, "h000000003f6b4000".U, "h000000003f68bf96".U, "h000000003f832734".U, "h000000003f12f7bc".U, "h000000003ed521bd".U, "h000000003fc3e5de".U, "h000000003fcfde36".U, "h000000003fb318c4".U, "h000000003e69dd34".U, "h000000003f193382".U, "h000000003e8c9352".U, "h000000003fa3fb03".U, "h000000003faa1960".U, "h000000003e56c7a4".U, "h000000003f9a273b".U, "h000000003f81f96b".U, "h000000003f86a33c".U, "h000000003f715fd7".U, "h000000003f6d5efe".U, "h000000003f463632".U, "h000000003f0e08cc".U, "h000000003fddc9d4".U, "h000000003f695d56".U, "h000000003f8418c4".U, "h000000003f497aa2".U, "h000000003fa4e085".U, "h000000003fa5f47c".U, "h000000003fba2fd6".U, "h000000003fb03856".U, "h000000003f48815a".U, "h000000003fe11a4c".U, "h000000003fda26cb".U
    )
    val floatOutputMul = Array("h4396d200".U, "h000000004396d200".U, "h00000000c396d200".U, "h00000000c396d200".U, "h00000000c396d200".U, "h00000000c396d200".U, "h000000004396d200".U, "h000000004396d200".U, "h00000000c11dc0ed".U, "h00000000c11dc0ed".U, "h0000000000000000".U, "h0000000000000000".U, "h000000007fc00000".U, "h000000007fc00000".U, "h00000000ffc00000".U, "h00000000ffc00000".U, "h000000007f800000".U, "h00000000ff800000".U, "h00000000ff800000".U, "h000000007f800000".U, "h000000007f800000".U, "h00000000ff800000".U, "h000000003ea9a774".U, "h000000003f2010e5".U, "h000000003e386b66".U, "h000000003e83dab7".U, "h000000003e1d926b".U, "h000000003e99b695".U, "h000000003e3fc682".U, "h000000003f5f5775".U, "h000000003ee9780f".U, "h000000003db005b0".U, "h000000003b81bc1f".U, "h000000003de2039b".U, "h000000003d80a790".U, "h000000003c676165".U, "h000000003e5f4134".U, "h000000003edc5e6b".U, "h000000003e39b6a3".U, "h000000003eab2430".U, "h000000003ef5d598".U, "h000000003e670ce2".U, "h000000003ecfa405".U, "h000000003eb6b089".U, "h000000003dcc81a4".U, "h000000003f3e08b3".U, "h000000003d879ea7".U, "h000000003d3967c5".U, "h000000003e028a7c".U, "h000000003e9f066c".U, "h000000003aa86a46".U, "h000000003cec93cf".U, "h000000003e6cd55c".U, "h000000003f44886d".U, "h000000003e1363db".U, "h000000003e920c5f".U, "h000000003eaf390b".U, "h000000003cab1010".U, "h000000003ed0cbf5".U, "h000000003f2bcb36".U, "h000000003e56ffdf".U, "h000000003e68058b".U, "h000000003de9d081".U, "h000000003ec64f79".U, "h000000003e8c3eb5".U, "h000000003e517691".U, "h000000003e765b13".U, "h000000003f1021ca".U, "h000000003f107d44".U, "h000000003ecff198".U, "h000000003ea6364c".U, "h000000003f1f90d9".U, "h000000003dd543f6".U, "h000000003f5fd5aa".U, "h000000003e053852".U, "h000000003e8dc810".U, "h000000003e3252a7".U, "h000000003e777662".U, "h000000003dcf0198".U, "h000000003d542f8a".U, "h000000003e6d525f".U, "h000000003e1d7dd8".U, "h000000003c551cc0".U, "h000000003ec0e862".U, "h000000003f6bb60f".U, "h000000003e86486e".U, "h000000003e8d8608".U, "h000000003d8bec7a".U, "h000000003e1248f5".U, "h000000003de47fd7".U, "h000000003dcbe670".U, "h000000003dfa6777".U, "h000000003d910564".U, "h000000003ce07061".U, "h000000003d2d4463".U, "h000000003f15a276".U, "h000000003f229a0c".U, "h000000003ef8bd3e".U, "h000000003c4e9d49".U, "h000000003d26b20d".U, "h000000003c6a66a6".U, "h000000003ec1a583".U, "h000000003eddcae4".U, "h000000003c0649d7".U, "h000000003e513b2d".U, "h000000003de4aeb9".U, "h000000003d5ceeb7".U, "h000000003d80f3d9".U, "h000000003b7bc0e1".U, "h000000003ddb629c".U, "h000000003d82dc70".U, "h000000003f3f9760".U, "h000000003e4b2803".U, "h000000003e8643cc".U, "h000000003d8c452e".U, "h000000003ecdd002".U, "h000000003e9a969c".U, "h000000003f01a0aa".U, "h000000003ef0cbc7".U, "h000000003cd8fd0f".U, "h000000003f456426".U, "h000000003f39c8de".U
    )

    val doubleInput1 = Array()
    val doubleInput2 = Array()
    val doubleOutputAdd = Array()
    val doubleOutputMul = Array()

    poke(c.io.inputType, 0)
//    poke(c.io.operand, 1) // ask for addition
//    for (i <- 0 to 121) {
//        poke(c.io.operand1, input1(i))
//        poke(c.io.operand2, input2(i))
//        step(1)
//        expect(c.io.result, outputAdd(i))
//    }

    poke(c.io.operand, 0) // ask for multiplication
    for (i <- 0 to 121) {
        poke(c.io.operand1, input1(i))
        poke(c.io.operand2, input2(i))
        step(1)
        expect(c.io.result, outputMul(i)) // TODO change the array
    }

}

/**
  * This is a trivial example of how to run this Specification
  * From within sbt use:
  *
  * testOnly example.test.FPUTester
  *
  * From a terminal shell use:
  *
  * sbt 'testOnly example.test.FPUTester'
  *
  */
class FPUTester extends ChiselFlatSpec {
  // Disable this until we fix isCommandAvailable to swallow stderr along with stdout
  private val backendNames = if(false && firrtl.FileUtils.isCommandAvailable(Seq("verilator"))) {
    Array("firrtl", "verilator")
  }
  else {
    Array("firrtl")
  }
  for ( backendName <- backendNames ) {
    "FPU" should s"calculate proper greatest common denominator (with $backendName)" in {
      Driver(() => new FPU, backendName) {
        c => new FPUUnitTester(c)
      } should be (true)
    }
  }

  "Basic test using Driver.execute" should "be used as an alternative way to run specification" in {
    iotesters.Driver.execute(Array(), () => new FPU) {
      c => new FPUUnitTester(c)
    } should be (true)
  }

  "using --backend-name verilator" should "be an alternative way to run using verilator" in {
    if(backendNames.contains("verilator")) {
      iotesters.Driver.execute(Array("--backend-name", "verilator"), () => new FPU) {
        c => new FPUUnitTester(c)
      } should be(true)
    }
  }

  "running with --is-verbose" should "show more about what's going on in your tester" in {
    iotesters.Driver.execute(Array("--is-verbose"), () => new FPU) {
      c => new FPUUnitTester(c)
    } should be(true)
  }

  "running with --fint-write-vcd" should "create a vcd file from your test" in {
    iotesters.Driver.execute(Array("--fint-write-vcd"), () => new FPU) {
      c => new FPUUnitTester(c)
    } should be(true)
  }
}
